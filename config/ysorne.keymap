#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&led_strip {
    chain-length = <0>;

    // chain-length = <27>;
    // 21 backlight + 6 glowlight
};

&nice_view_spi { cs-gpios = <&pro_micro 4 GPIO_ACTIVE_HIGH>; };

#define TAPPING_TERM 200

/ {
    behaviors {
        /*
    * td_lock groups locking functions into one key:
    *  - tap once to lock the host
    *  - tap twice to put the host to sleep
    */

        td_lock: tap_dance_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LOCK";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
        };

        HRM: HRM {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <190>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        HMLT: HMLT {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <190>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>;
        };

        HMLT2: HMLT2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLT2";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <215>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Capslock {
            bindings = <&kp CLCK>;
            key-positions = <9 8>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <15 16>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <19 20>;
            timeout-ms = <30>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            timeout-ms = <30>;
        };

        equal_arrow {
            bindings = <&equal_arrow>;
            key-positions = <8 9>;
            timeout-ms = <40>;
            layers = <7>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 21>;
        };

        f18 {
            bindings = <&kp F18>;
            key-positions = <32 33>;
        };

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };
    };

    macros {
        git_status: git_status {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp S &kp T &kp A &kp T &kp U &kp S>;
            label = "GIT_STATUS";
        };

        git_commit_all: git_commit_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE &kp MINUS &kp A &kp MINUS &kp M &kp SPACE &kp DQT &kp DQT &kp LEFT_ARROW>;
            label = "GIT_COMMIT";
        };

        equal_arrow: equal_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "EQUAL_ARROW";
        };

        minus_arrow: minus_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "MINUS_ARROW";
        };

        parentheses_and_move: parentheses_and_move {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS>;
            label = "PARENTHESES_AND_MOVE";
        };

        rbb: next_next {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp RIGHT_BRACE>;
            label = "NEXT_NEXT";
        };

        lbb: lbb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp LEFT_BRACE>;
            label = "LBB";
        };

        go_asign: go_asign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GO_ASIGN";
        };

        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
            label = "NOT_EQUAL";
        };

        left_arrow: left_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp MINUS>;
            label = "LEFT_ARROW";
        };

        right_arrow: right_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "RIGHT_ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
&trans  &kp Q            &HMLT2 7 W       &HMLT2 4 E      &HMLT2 3 R         &kp T          &kp Y          &HMLT2 2 U         &HMLT2 1 I      &HMLT2 6 O       &kp P               &trans
&trans  &HRM LEFT_GUI A  &HRM LEFT_ALT S  &HRM LCTRL D    &HRM LEFT_SHIFT F  &kp G          &kp H          &HRM LEFT_SHIFT J  &HRM LCTRL K    &HRM LEFT_ALT L  &HRM LEFT_GUI SEMI  &trans
&trans  &kp Z            &HMLT 5 X        &kp C           &kp V              &kp B          &kp N          &kp M              &kp COMMA       &HMLT 5 DOT      &kp SLASH           &trans
                                          &HMLT 7 ESCAPE  &HMLT 4 SPACE      &HMLT 3 TAB    &HMLT 2 ENTER  &HMLT 1 BACKSPACE  &HMLT 6 DELETE
            >;
        };

        num {
            bindings = <
&trans  &kp BACKSLASH  &kp N9  &kp N8   &kp N7  &kp MINUS    &trans    &trans    &trans        &trans     &trans  &trans
&trans  &kp SQT        &kp N6  &kp N5   &kp N4  &kp EQUAL    &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &kp GRAVE      &kp N3  &kp N2   &kp N1  &kp N0       &trans    &trans    &kp DELETE    &trans     &trans  &trans
                               &kp DOT  &kp N0  &kp MINUS    &trans    &trans    &trans
            >;

            label = "NUM";
        };

        sym {
            bindings = <
&trans  &kp PIPE   &kp LPAR   &kp STAR   &kp AMPS  &kp UNDERSCORE           &trans    &trans    &none   &trans     &trans  &trans
&trans  &kp DQT    &kp CARET  &kp PRCNT  &kp DLLR  &kp PLUS                 &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &kp TILDE  &kp POUND  &kp AT     &kp EXCL  &kp RIGHT_PARENTHESIS    &trans    &trans    &trans  &trans     &trans  &trans
                              &kp LPAR   &kp RPAR  &kp UNDER                &trans    &trans    &trans
            >;

            label = "SYM";
        };

        func {
            bindings = <
&trans  &trans        &trans        &trans     &trans      &trans           &kp F9  &kp F10  &kp F11  &kp F12  &kp F18  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LSHIFT  &trans           &kp F5  &kp F6   &kp F7   &kp F8   &trans   &trans
&trans  &kp LG(Z)     &kp LG(X)     &kp LG(C)  &kp LG(V)   &kp LG(LS(Z))    &kp F1  &kp F2   &kp F3   &kp F4   &trans   &trans
                                    &trans     &trans      &trans           &trans  &trans   &trans
            >;

            label = "FUNC";
        };

        Nav {
            bindings = <
&trans  &kp ESC          &kp ESC          &trans        &trans         &trans           &trans     &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACKET  &trans     &trans
&trans  &HRM LEFT_GUI A  &HRM LEFT_ALT S  &HRM LCTRL D  &HRM LSHIFT F  &trans           &kp LEFT   &kp DOWN          &kp UP                &kp RIGHT          &trans     &trans
&trans  &kp LG(Z)        &kp LG(X)        &kp LG(C)     &kp LG(V)      &kp LG(LS(Z))    &kp PG_UP  &kp HOME          &kp DEL               &kp END            &kp PG_DN  &trans
                                          &trans        &trans         &trans           &trans     &trans            &trans
            >;

            label = "NAV";
        };

        mouse {
            bindings = <
&trans  &trans  &msc SCRL_DOWN  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans          &trans          &trans        &trans             &trans          &trans          &trans        &trans           &trans  &trans
                                &mkp MCLK       &mkp LCLK     &mkp RCLK          &mkp RCLK       &mkp LCLK       &mkp MCLK
            >;

            label = "MOUSE";
        };

        extended_layer {
            label = "EXT";
            bindings = <
&trans  &trans        &trans            &trans        &trans        &bt BT_CLR      &bootloader  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &kp K_PLAY_PAUSE  &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP    &trans       &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans       &trans  &trans
            >;
        };

        custom {
            bindings = <
&trans  &trans  &kp ESCAPE  &trans  &trans  &bootloader    &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans
&trans  &trans  &trans      &trans  &trans  &trans         &trans  &kp DELETE            &kp BACKSPACE          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans  &trans  &trans      &trans  &trans  &trans         &trans  &not_equal            &left_arrow            &right_arrow      &go_asign          &trans
                            &trans  &trans  &trans         &trans  &trans                &trans
            >;

            label = "CST";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_EXT {
            if-layers = <6 6>;
            then-layer = <6>;
        };
    };
};
